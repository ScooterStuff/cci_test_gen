[
  {
    "id": "test-example-0",
    "old_comment_raw": "Checks if the list is sorted in ascending order. Assumes the list only contains integers.",
    "old_code_raw": "public boolean isSorted(List<Integer> list) {\n    for (int i = 0; i < list.size() - 1; i++) {\n        if (list.get(i) > list.get(i + 1)) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "new_code_raw": "public boolean isSorted(List<?> list) {\n    if (list == null || list.isEmpty()) {\n        return true;\n    }\n    for (int i = 0; i < list.size() - 1; i++) {\n        Object current = list.get(i);\n        Object next = list.get(i + 1);\n        if (!(current instanceof Comparable) || !(next instanceof Comparable)) {\n            throw new IllegalArgumentException(\"List contains non-comparable elements\");\n        }\n        Comparable<Object> currentComparable = (Comparable<Object>) current;\n        if (currentComparable.compareTo(next) > 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"
  },
  {
    "id": "example-1",
    "old_comment_raw": "Returns true if all elements in the list are positive integers.",
    "old_code_raw": "public boolean allPositive(List<Integer> list) {\n    for (int num : list) {\n        if (num <= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "new_code_raw": "public boolean allPositive(List<Integer> list) {\n    if (list == null || list.isEmpty()) {\n        return false;\n    }\n    for (int num : list) {\n        if (num < 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"
  },
  {
    "id": "example-2",
    "old_comment_raw": "Finds the minimum value in the list of integers. Assumes the list is not empty.",
    "old_code_raw": "public int findMin(List<Integer> list) {\n    int min = list.get(0);\n    for (int num : list) {\n        if (num < min) {\n            min = num;\n        }\n    }\n    return min;\n}\n",
    "new_code_raw": "public int findMin(List<Integer> list) {\n    if (list == null || list.isEmpty()) {\n        return Integer.MAX_VALUE;\n    }\n    int min = list.get(0);\n    for (int num : list) {\n        if (num < min) {\n            min = num;\n        }\n    }\n    return min;\n}\n"
  },
  {
    "id": "example-3",
    "old_comment_raw": "Sorts the list in ascending order. Assumes the list contains only integers.",
    "old_code_raw": "public void sortList(List<Integer> list) {\n    Collections.sort(list);\n}\n",
    "new_code_raw": "public void sortList(List<?> list) {\n    if (list == null) {\n        throw new IllegalArgumentException(\"List cannot be null\");\n    }\n    list.sort(null);\n}\n"
  },
  {
    "id": "example-4",
    "old_comment_raw": "Removes duplicates from the list. Assumes the list contains only integers.",
    "old_code_raw": "public void removeDuplicates(List<Integer> list) {\n    Set<Integer> unique = new HashSet<>(list);\n    list.clear();\n    list.addAll(unique);\n}\n",
    "new_code_raw": "public void removeDuplicates(List<?> list) {\n    if (list == null) {\n        return;\n    }\n    Set<Object> unique = new LinkedHashSet<>(list);\n    list.clear();\n    list.addAll(unique);\n}\n"
  },
  {
    "id": "example-5",
    "old_comment_raw": "Returns the first index of the given element in the list.",
    "old_code_raw": "public int indexOf(List<String> list, String element) {\n    for (int i = 0; i < list.size(); i++) {\n        if (list.get(i).equals(element)) {\n            return i;\n        }\n    }\n    return -1;\n}\n",
    "new_code_raw": "public int indexOf(List<String> list, String element) {\n    if (list == null || element == null) {\n        return -1;\n    }\n    for (int i = 0; i < list.size(); i++) {\n        if (element.equals(list.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n"
  },
  {
    "id": "example-6",
    "old_comment_raw": "Counts the number of even numbers in the list.",
    "old_code_raw": "public int countEvens(List<Integer> list) {\n    int count = 0;\n    for (int num : list) {\n        if (num % 2 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n",
    "new_code_raw": "public int countEvens(List<Integer> list) {\n    if (list == null) {\n        return 0;\n    }\n    int count = 0;\n    for (int num : list) {\n        if (num % 2 == 0 && num > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"
  },
  {
    "id": "example-7",
    "old_comment_raw": "Filters out all null elements from the list.",
    "old_code_raw": "public void removeNulls(List<String> list) {\n    list.removeIf(Objects::isNull);\n}\n",
    "new_code_raw": "public void removeNulls(List<?> list) {\n    if (list == null) {\n        throw new IllegalArgumentException(\"List cannot be null\");\n    }\n    list.removeIf(Objects::isNull);\n}\n"
  },
  {
    "id": "example-8",
    "old_comment_raw": "Returns true if the string is a palindrome. Assumes the string contains only lowercase letters.",
    "old_code_raw": "public boolean isPalindrome(String str) {\n    int i = 0, j = str.length() - 1;\n    while (i < j) {\n        if (str.charAt(i) != str.charAt(j)) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n",
    "new_code_raw": "public boolean isPalindrome(String str) {\n    if (str == null || str.isEmpty()) {\n        return false;\n    }\n    String lower = str.toLowerCase();\n    int i = 0, j = lower.length() - 1;\n    while (i < j) {\n        if (lower.charAt(i) != lower.charAt(j)) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n"
  },
  {
    "id": "example-9",
    "old_comment_raw": "Checks if all elements in the list are unique.",
    "old_code_raw": "public boolean allUnique(List<Integer> list) {\n    Set<Integer> set = new HashSet<>();\n    for (int num : list) {\n        if (!set.add(num)) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "new_code_raw": "public boolean allUnique(List<?> list) {\n    if (list == null) {\n        throw new IllegalArgumentException(\"List cannot be null\");\n    }\n    Set<Object> set = new HashSet<>();\n    for (Object obj : list) {\n        if (!set.add(obj)) {\n            return false;\n        }\n    }\n    return true;\n}\n"
  }
]
